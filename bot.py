import os
import json
import datetime
import asyncio
import pytz
import logging


from babel.dates import format_datetime
def format_date(dt, format_str="d MMMM", locale="ru_RU"):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º datetime –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"""
    return format_datetime(dt, format_str, locale=locale)


import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
from matplotlib import font_manager as fm

from geopy.geocoders import Nominatim
from timezonefinderL import TimezoneFinder

from aiogram import Bot, Dispatcher
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile, Location, ReplyKeyboardRemove
from aiogram.filters import Command


from apscheduler.schedulers.asyncio import AsyncIOScheduler

# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ====
API_TOKEN = "API"

DEFAULT_CITY = "Moscow"
DEFAULT_LAT, DEFAULT_LON = 55.75, 37.61
USERS_FILE = "users.json"

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()
geolocator = Nominatim(user_agent="WeatherBot")
tf = TimezoneFinder()

# ==== –†–∞–±–æ—Ç–∞ —Å JSON ====
def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_users():
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=2)

users = load_users()

# ==== –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≥–æ—Ä–æ–¥–∞ ====
def get_city_coordinates(city_name):
    location = geolocator.geocode(city_name, timeout=10)
    if location:
        return location.latitude, location.longitude
    return None, None

# ==== –¢–∞–π–º–∑–æ–Ω–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º ====
def get_timezone(lat, lon):
    tz_name = tf.timezone_at(lat=lat, lng=lon)
    return tz_name if tz_name else "Europe/Moscow"
    
# ==== –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã ====
import aiohttp
import time

# ==== –ö–µ—à –ø–æ–≥–æ–¥—ã ====
weather_cache = {}  # –∫–ª—é—á (lat, lon), –∑–Ω–∞—á–µ–Ω–∏–µ { "time": timestamp, "data": response_json }
CACHE_TTL = 600  # 10 –º–∏–Ω—É—Ç

# ==== –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã ====
async def get_weather(lat, lon, tz_name="Europe/Moscow"):
    cache_key = (round(lat, 2), round(lon, 2))  # –æ–∫—Ä—É–≥–ª–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á—Ç–æ–±—ã –∫–µ—à –±—ã–ª –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–º
    now = time.time()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if cache_key in weather_cache:
        cached = weather_cache[cache_key]
        if now - cached["time"] < CACHE_TTL:
            response = cached["data"]
        else:
            del weather_cache[cache_key]  # —É—Å—Ç–∞—Ä–µ–ª
    else:
        response = None

    if response is None:
        url = (
            f"https://api.open-meteo.com/v1/forecast?"
            f"latitude={lat}&longitude={lon}&"
            f"hourly=temperature_2m,relative_humidity_2m,wind_speed_10m,"
            f"precipitation,weathercode,apparent_temperature&"
            f"daily=sunrise,sunset,temperature_2m_max,temperature_2m_min,"
            f"apparent_temperature_max,apparent_temperature_min,"
            f"precipitation_sum,uv_index_max,weathercode,"
            f"windspeed_10m_max,winddirection_10m_dominant&"
            f"timezone=auto"
        )
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                response = await resp.json()

        weather_cache[cache_key] = {"time": now, "data": response}

    # ==== Hourly (12 —á–∞—Å–æ–≤) ====
    hourly_data = response.get("hourly", {})
    all_times = hourly_data.get("time", [])
    all_temps = hourly_data.get("temperature_2m", [])
    all_humidity = hourly_data.get("relative_humidity_2m", [])
    all_wind = hourly_data.get("wind_speed_10m", [])
    all_rain = hourly_data.get("precipitation", [])
    all_codes = hourly_data.get("weathercode", [])
    all_app = hourly_data.get("apparent_temperature", [])

    # –¢–∞–π–º–∑–æ–Ω–∞
    tz = pytz.timezone(tz_name)
    now_dt = datetime.datetime.now(tz)

    start_index = 0
    for i, t in enumerate(all_times):
        t_dt = datetime.datetime.fromisoformat(t)
        if t_dt.tzinfo is None:
            t_dt = tz.localize(t_dt)
        if t_dt >= now_dt.replace(minute=0, second=0, microsecond=0):
            start_index = i
            break

    temps = all_temps[start_index:start_index+12]
    humidity = all_humidity[start_index:start_index+12]
    wind = all_wind[start_index:start_index+12]
    rain = all_rain[start_index:start_index+12]
    codes = all_codes[start_index:start_index+12]
    apparent = all_app[start_index:start_index+12]
    times_fmt = [
        datetime.datetime.fromisoformat(t).strftime("%H:%M")
        for t in all_times[start_index:start_index+12]
    ]

    min_temp = min(temps) if temps else None
    max_temp = max(temps) if temps else None
    avg_temp = round(sum(temps)/len(temps), 1) if temps else None
    avg_humidity = round(sum(humidity)/len(humidity), 1) if humidity else None
    avg_wind = round(sum(wind)/len(wind), 1) if wind else None
    rain_expected = any(r > 0 for r in rain) if rain else False

    summary = "üå° –ü–æ–≥–æ–¥–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
    if codes:
        wmo_codes = {
            0: "‚òÄÔ∏è –°–æ–ª–Ω–µ—á–Ω–æ",
            1: "üå§ –ü–æ—á—Ç–∏ —è—Å–Ω–æ",
            2: "‚õÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
            3: "‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ",
            45: "üå´ –¢—É–º–∞–Ω",
            48: "üå´ –¢—É–º–∞–Ω —Å –∏–∑–º–æ—Ä–æ–∑—å—é",
            51: "üå¶ –õ—ë–≥–∫–∏–π –¥–æ–∂–¥—å",
            61: "üåß –î–æ–∂–¥—å",
            71: "‚ùÑÔ∏è –°–Ω–µ–≥",
            80: "üå¶ –õ–∏–≤–µ–Ω—å",
            95: "‚õà –ì—Ä–æ–∑–∞"
        }
        summary = wmo_codes.get(codes[0], summary)

    # ==== Daily (3 –¥–Ω—è) ====
    daily = response.get("daily", {})
    daily_data = []
    for i in range(min(3, len(daily.get("time", [])))):
        daily_data.append({
            "date": daily["time"][i],
            "sunrise": daily["sunrise"][i],
            "sunset": daily["sunset"][i],
            "temp_max": daily["temperature_2m_max"][i],
            "temp_min": daily["temperature_2m_min"][i],
            "app_temp_max": daily["apparent_temperature_max"][i],
            "app_temp_min": daily["apparent_temperature_min"][i],
            "precip": daily["precipitation_sum"][i],
            "uv": daily["uv_index_max"][i],
            "wind_speed": daily["windspeed_10m_max"][i],
            "wind_dir": daily["winddirection_10m_dominant"][i],
            "code": daily["weathercode"][i]
        })

    return {
        "temps": temps,
        "times": times_fmt,
        "rain_list": rain,
        "codes": codes,
        "apparent": apparent,
        "min_temp": min_temp,
        "max_temp": max_temp,
        "avg_temp": avg_temp,
        "avg_humidity": avg_humidity,
        "avg_wind": avg_wind,
        "rain": rain_expected,
        "summary": summary,
        "daily_data": daily_data
    }



# ==== –°–æ–≤–µ—Ç –ø–æ –æ–¥–µ–∂–¥–µ ====
def clothing_advice(temp, wind, rain):
    advice = ""
    if temp < 0:
        advice += "–û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ ü•∂ ‚Äî —Ç—ë–ø–ª–∞—è –∫—É—Ä—Ç–∫–∞, —à–∞–ø–∫–∞ –∏ –ø–µ—Ä—á–∞—Ç–∫–∏.\n"
    elif temp < 10:
        advice += "–ü—Ä–æ—Ö–ª–∞–¥–Ω–æ ‚ùÑÔ∏è ‚Äî –ª—É—á—à–µ –Ω–∞–¥–µ—Ç—å –∫—É—Ä—Ç–∫—É –∏–ª–∏ —Ç–æ–ª—Å—Ç–æ–≤–∫—É.\n"
    elif temp < 20:
        advice += "–£–º–µ—Ä–µ–Ω–Ω–æ üå§ ‚Äî –ª—ë–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞ –∏–ª–∏ —Å–≤–∏—Ç–µ—Ä.\n"
    else:
        advice += "–¢–µ–ø–ª–æ ‚òÄÔ∏è ‚Äî –ø–æ–¥–æ–π–¥—ë—Ç —Ñ—É—Ç–±–æ–ª–∫–∞ –∏ –ª—ë–≥–∫–∞—è –æ–¥–µ–∂–¥–∞.\n"

    if wind > 6:
        advice += "–°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä üí® ‚Äî –≤–æ–∑—å–º–∏ –≤–µ—Ç—Ä–æ–≤–∫—É.\n"
    if rain:
        advice += "–û–∂–∏–¥–∞—é—Ç—Å—è –æ—Å–∞–¥–∫–∏ ‚òî ‚Äî –Ω–µ –∑–∞–±—É–¥—å –∑–æ–Ω—Ç –∏–ª–∏ –¥–æ–∂–¥–µ–≤–∏–∫.\n"
    elif rain and temp < 2:
        advice += "‚ùÑÔ∏è –í–æ–∑–º–æ–∂–µ–Ω —Å–Ω–µ–≥ ‚Äî –≤–æ–∑—å–º–∏ —Ç—ë–ø–ª—É—é –æ–±—É–≤—å.\n"
    return advice

def check_weather_changes(daily_data):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –º–µ–∂–¥—É —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º –∏ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–º –¥–Ω–µ–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.
    """
    if len(daily_data) < 2:
        return ""

    today, tomorrow = daily_data[0], daily_data[1]
    alerts = []

    # –†–µ–∑–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    diff_max = tomorrow["temp_max"] - today["temp_max"]
    diff_min = tomorrow["temp_min"] - today["temp_min"]

    if diff_max >= 8 or diff_min >= 8:
        alerts.append(f"‚òÄÔ∏è –ó–∞–≤—Ç—Ä–∞ –ø–æ—Ç–µ–ø–ª–µ–µ—Ç –Ω–∞ {max(diff_max, diff_min)}¬∞C")
    if diff_max <= -8 or diff_min <= -8:
        alerts.append(f"‚ùÑÔ∏è –ó–∞–≤—Ç—Ä–∞ –ø–æ—Ö–æ–ª–æ–¥–∞–µ—Ç –Ω–∞ {abs(min(diff_max, diff_min))}¬∞C")

    # –ü–æ—è–≤–ª–µ–Ω–∏–µ –æ—Å–∞–¥–∫–æ–≤
    if tomorrow["precip"] > 0 and today["precip"] == 0:
        alerts.append("‚òî –ó–∞–≤—Ç—Ä–∞ –æ–∂–∏–¥–∞—é—Ç—Å—è –æ—Å–∞–¥–∫–∏")

    # –ì—Ä–æ–∑–∞
    if tomorrow["code"] in [95, 96, 99]:
        alerts.append("‚õà –í–æ–∑–º–æ–∂–Ω–∞ –≥—Ä–æ–∑–∞")

    return "\n".join(alerts)


# ==== –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–≥–æ–¥—ã ====
async def send_weather(chat_id: int):
    user = users.get(str(chat_id), {"city": DEFAULT_CITY, "lat": DEFAULT_LAT, "lon": DEFAULT_LON, "tz": "Europe/Moscow"})
    city = user["city"]
    data = await get_weather(user["lat"], user["lon"])

    avg_app_temp = round(sum(data.get("apparent", []))/len(data.get("apparent", [1])), 1)

    tz = pytz.timezone(user.get("tz", "Europe/Moscow"))
    now = datetime.datetime.now(tz)
    date_str = format_date(now, "d MMMM")  # –≤–º–µ—Å—Ç–æ now.strftime("%d %B")
    
    today_uv = None
    if data.get("daily_data") and len(data["daily_data"]) > 0:
        today_uv = data["daily_data"][0].get("uv")

    text = (
        f"üìÖ {date_str}\n\n"
        f"üìç –ü–æ–≥–æ–¥–∞ –≤ {city}\n"
        f"{data['summary']}\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['avg_temp']}¬∞C (min: {data['min_temp']}¬∞C, max: {data['max_temp']}¬∞C), –æ—â—É—â–∞–µ—Ç—Å—è: {avg_app_temp}¬∞C\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {data['avg_humidity']}%\n"
        f"üí® –í–µ—Ç–µ—Ä: {data['avg_wind']} –º/—Å\n"
        f"‚òî –û—Å–∞–¥–∫–∏: {'–î–∞' if data['rain'] else '–ù–µ—Ç'}\n"
        f"üëï –°–æ–≤–µ—Ç:\n{clothing_advice(data['avg_temp'], data['avg_wind'], data['rain'])}"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ, —É–∂–µ –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏
    alerts = check_weather_changes(data["daily_data"])
    if alerts:
        text += f"\n\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:\n{alerts}"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", callback_data="update_weather"),
                InlineKeyboardButton(text="üåÜ –°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="choose_city"),
                InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="extended_weather")
            ],
        ]
    )

# ==== –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ —Ü–≤–µ—Ç–Ω—ã–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏ –∏ –ª–µ–≥–µ–Ω–¥–æ–π ====

    precip_colors = {
        51: "skyblue", 53: "skyblue", 55: "skyblue",  # –¥–æ–∂–¥—å –º–µ–ª–∫–∏–π
        61: "blue", 63: "blue", 65: "blue",           # –¥–æ–∂–¥—å —Å–∏–ª—å–Ω—ã–π
        71: "white", 73: "white", 75: "white",        # —Å–Ω–µ–≥
        80: "cyan", 81: "cyan", 82: "cyan",           # –ª–∏–≤–Ω–µ–≤–æ–π –¥–æ–∂–¥—å
        95: "purple", 96: "purple", 99: "purple",     # –≥—Ä–æ–∑–∞
    }

    filename = f"weather_{chat_id}.png"
    plt.figure(figsize=(7, 4), facecolor="black")
    plt.plot(data["times"], data["temps"], marker="o", color="deepskyblue", linewidth=2)

    # –¶–≤–µ—Ç–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –æ—Å–∞–¥–∫–æ–≤
    plt.plot(data["times"], data["temps"], marker="o", color="deepskyblue", linewidth=2, zorder=1)
    for t, temp, code in zip(data["times"], data["temps"], data["codes"]):
        if code in precip_colors:
            plt.scatter(t, temp, color=precip_colors[code], s=60, zorder=2, edgecolors="white",linewidth=1)


    # –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –ª–µ–≥–µ–Ω–¥–∞
    import matplotlib.patches as mpatches
    legend_elements = [
        mpatches.Patch(color="skyblue", label="–ú–æ—Ä–æ—Å—å"),
        mpatches.Patch(color="blue", label="–î–æ–∂–¥—å"),
        mpatches.Patch(color="cyan", label="–õ–∏–≤–µ–Ω—å"),
        mpatches.Patch(color="white", label="–°–Ω–µ–≥"),
        mpatches.Patch(color="purple", label="–ì—Ä–æ–∑–∞"),
    ]

    # –°–æ–∑–¥–∞—ë–º –ª–µ–≥–µ–Ω–¥—É
    legend = plt.legend(
        handles=legend_elements,
        fontsize=8,
        loc="upper left",
        labelcolor="white",
        frameon=False  # —Å—Ä–∞–∑—É —É–±–∏—Ä–∞–µ–º —Ä–∞–º–∫—É
    )

    # –î–µ–ª–∞–µ–º —Ñ–æ–Ω –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Ç–µ–º–∞ –º–µ–Ω—è–µ—Ç—Å—è)
    legend.get_frame().set_facecolor("none")


    plt.title("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ —á–∞—Å—ã", color="deepskyblue", fontsize=12)
    plt.xlabel("–í—Ä–µ–º—è", color="white")
    plt.ylabel("¬∞C", color="white")
    plt.grid(color="gray", linestyle="--", alpha=0.3)
    plt.xticks(color="white")
    plt.yticks(color="white")
    plt.gca().set_facecolor("black")
    plt.tight_layout()
    plt.savefig(filename, dpi=150, facecolor="black")
    plt.close()
    
    # ==== –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–∞ ====
    photo = FSInputFile(filename)
    await bot.send_photo(chat_id, photo, caption=text, reply_markup=keyboard)
    os.remove(filename)

# ==== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ ====
def register_job(chat_id: int):
    user = users.get(str(chat_id))
    if not user:
        return

    tz_name = user.get("tz", "Europe/Moscow")
    tz = pytz.timezone(tz_name)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É
    job_id = f"weather_{chat_id}"
    existing_job = scheduler.get_job(job_id)
    if existing_job:
        scheduler.remove_job(job_id)

    hour = user.get("notify_hour", 7)
    minute = user.get("notify_minute", 0)

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è AsyncIOScheduler
    scheduler.add_job(
        send_weather,          # –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        trigger="cron",
        args=[chat_id],        # –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏
        hour=hour,
        minute=minute,
        timezone=tz,
        id=job_id,
        coalesce=True,         # –µ—Å–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Å—Ä–∞–∑—É
        max_instances=1        # –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    )

    print(f"‚úÖ Registered weather job for chat {chat_id} at {hour:02d}:{minute:02d} {tz_name}")


# ==== –•–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ ====
@dp.message(Command("help"))
async def help_cmd(message: Message):
    help_text = (
        "üìå *–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –ø–æ–≥–æ–¥—ã:*\n\n"
        "/start ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
        "/weather ‚Äî –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã\n"
        "/setcity <–≥–æ—Ä–æ–¥> ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞\n"
        "/mylocation ‚Äî –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞\n"
        "/settime HH:MM ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "‚ÑπÔ∏è –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞, —Å–º–µ–Ω—ã –≥–æ—Ä–æ–¥–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞."
    )
    await message.answer(help_text, parse_mode="Markdown")
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ª–æ–∫–∞—Ü–∏–∏
@dp.message(Command("mylocation"))
async def mylocation_cmd(message: Message):
    await message.answer(
        "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é.",
        reply_markup=ReplyKeyboardRemove()  # —É–±–∏—Ä–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
@dp.message(lambda m: m.location is not None)
async def location_handler(message: Message):
    if not message.location:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é. –û—Ç–ø—Ä–∞–≤—å –ª–æ–∫–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ Telegram.")
        return

    lat = message.location.latitude
    lon = message.location.longitude
    chat_id = message.chat.id

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ –≥–µ–æ–ª–æ–∫–∞—Ç–æ—Ä
    location = geolocator.reverse((lat, lon), language="ru")
    city_name = location.raw.get("address", {}).get("city") or location.raw.get("address", {}).get("town") or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    tz = get_timezone(lat, lon)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users[str(chat_id)] = {"city": city_name, "lat": lat, "lon": lon, "tz": tz}
    save_users()
    register_job(chat_id)

    await message.answer(f"‚úÖ –õ–æ–∫–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞. –ü—Ä–æ–≥–Ω–æ–∑ –±—É–¥–µ—Ç –¥–ª—è {city_name}")
    await send_weather(chat_id)


@dp.callback_query(lambda c: c.data == "extended_weather")
async def extended_weather_callback(callback: CallbackQuery):
    chat_id = callback.from_user.id
    user = users.get(str(chat_id), {"city": DEFAULT_CITY, "lat": DEFAULT_LAT, "lon": DEFAULT_LON})
    city = user["city"]
    data = await get_weather(user["lat"], user["lon"])

    wmo_codes = {
        0: "‚òÄÔ∏è —è—Å–Ω–æ",
        1: "üå§ –ø–æ—á—Ç–∏ —è—Å–Ω–æ",
        2: "‚õÖ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
        3: "‚òÅÔ∏è –æ–±–ª–∞—á–Ω–æ",
        45: "üå´ —Ç—É–º–∞–Ω",
        48: "üå´ —Ç—É–º–∞–Ω —Å –∏–∑–º–æ—Ä–æ–∑—å—é",
        51: "üå¶ –ª—ë–≥–∫–∏–π –¥–æ–∂–¥—å",
        61: "üåß –¥–æ–∂–¥—å",
        71: "‚ùÑÔ∏è —Å–Ω–µ–≥",
        80: "üå¶ –ª–∏–≤–µ–Ω—å",
        95: "‚õà –≥—Ä–æ–∑–∞"
    }

    extended_text = f"üìç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è –¥–ª—è {city}:\n\n"

    for day in data["daily_data"]:
        date_str = datetime.datetime.fromisoformat(day["date"]).strftime("%d %B")
        sunrise = datetime.datetime.fromisoformat(day['sunrise']).strftime("%H:%M")
        sunset = datetime.datetime.fromisoformat(day['sunset']).strftime("%H:%M")
        date_str = format_date(datetime.datetime.fromisoformat(day['date']), "d MMMM")
        
        extended_text += (
            f"üìÖ {date_str} ‚Äî {wmo_codes.get(day['code'], 'üå° –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"üå° {day['temp_min']}¬∞C‚Ä¶{day['temp_max']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è {day['app_temp_min']}¬∞C‚Ä¶{day['app_temp_max']}¬∞C)\n"
            f"üí® –í–µ—Ç–µ—Ä: {day['wind_speed']} –º/—Å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {day['wind_dir']}¬∞\n"
            f"‚òî –û—Å–∞–¥–∫–∏: {day['precip']} –º–º\n"
            f"üîÜ UV Index: {day['uv']}\n"
            f"üåÖ {sunrise} | üåá {sunset}\n\n"
        )

    await callback.message.answer(extended_text)
    await callback.answer()

@dp.message(Command("settime"))
async def settime_cmd(message: Message):
    chat_id = message.chat.id
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM. –ù–∞–ø—Ä–∏–º–µ—Ä: /settime 07:30")
        return

    try:
        hour, minute = map(int, parts[1].split(":"))
        if not (0 <= hour <= 23 and 0 <= minute <= 59):
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π HH:MM –æ—Ç 00:00 –¥–æ 23:59.")
        return

    if str(chat_id) not in users:
        users[str(chat_id)] = {"city": DEFAULT_CITY, "lat": DEFAULT_LAT, "lon": DEFAULT_LON, "tz": "Europe/Moscow"}

    users[str(chat_id)]["notify_hour"] = hour
    users[str(chat_id)]["notify_minute"] = minute
    save_users()
    register_job(chat_id)

    await message.answer(f"‚úÖ –í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {hour:02d}:{minute:02d}")

@dp.message(Command("start"))
async def start_cmd(message: Message):
    chat_id = message.chat.id
    if str(chat_id) not in users:
        users[str(chat_id)] = {"city": DEFAULT_CITY, "lat": DEFAULT_LAT, "lon": DEFAULT_LON, "tz": "Europe/Moscow"}
        save_users()
        register_job(chat_id)

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 7:00 –ø–æ —Ç–≤–æ–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ üå¶\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /weather —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ —Å–µ–π—á–∞—Å.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /setcity <–≥–æ—Ä–æ–¥>, —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥."
    )

@dp.message(Command("weather"))
async def weather_cmd(message: Message):
    await send_weather(message.chat.id)

@dp.message(Command("setcity"))
async def setcity_cmd(message: Message):
    chat_id = message.chat.id
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥. –ü—Ä–∏–º–µ—Ä: /setcity Moscow")
        return

    city_name = parts[1]
    lat, lon = get_city_coordinates(city_name)
    if lat is None:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥.")
        return

    tz = get_timezone(lat, lon)
    users[str(chat_id)] = {"city": city_name, "lat": lat, "lon": lon, "tz": tz}
    save_users()
    register_job(chat_id)

    await message.answer(f"‚úÖ –ì–æ—Ä–æ–¥ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {city_name}. –ü—Ä–æ–≥–Ω–æ–∑ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ 7:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ {tz}")

# ==== –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ ====
popular_cities = ["Moscow", "Saint Petersburg", "Kaliningrad", "Krasnodar"]

@dp.callback_query(lambda c: c.data == "choose_city")
async def choose_city_callback(callback: CallbackQuery):
    city_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=city, callback_data=f"city_{city}")] for city in popular_cities]
    )
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=city_keyboard)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("city_"))
async def setcity_callback(callback: CallbackQuery):
    city_name = callback.data.replace("city_", "")
    chat_id = callback.from_user.id

    lat, lon = get_city_coordinates(city_name)
    if lat is None:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥.")
        await callback.answer()
        return

    tz = get_timezone(lat, lon)
    users[str(chat_id)] = {"city": city_name, "lat": lat, "lon": lon, "tz": tz}
    save_users()
    register_job(chat_id)

    await callback.message.answer(f"‚úÖ –ì–æ—Ä–æ–¥ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {city_name}. –ü—Ä–æ–≥–Ω–æ–∑ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ 7:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ {tz}")
    await send_weather(chat_id)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "update_weather")
async def update_callback(callback: CallbackQuery):
    await send_weather(callback.from_user.id)
    await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")

# ==== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ====
async def main():
    for chat_id in users.keys():
        register_job(int(chat_id))

    scheduler.start()
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

